name: Chart Testing for Renovate Updates

on:
  pull_request:
    types: [opened, reopened, ready_for_review]
    paths:
      - '**/Chart.yaml'
      - '**/values.yaml'
  push:
    branches:
      - 'renovate/**'
  issue_comment:
    types: [created]

jobs:
  chart-testing:
    if: >
      ((github.event_name == 'pull_request' || github.event_name == 'push') && 
       (contains(github.head_ref, 'renovate/') || contains(github.ref, 'renovate/') || contains(github.actor, 'renovate')))
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
      models: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: Analyze changelogs for breaking changes
        id: changelog-analysis
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN}}
        run: |
          # Extract dependency version changes from Chart.yaml
          dependency_diff=$(git diff HEAD~1 -- Chart.yaml | grep "^[+-].*version:" || true)
          echo $dependency_diff
          if [ -z "$dependency_diff" ]; then
            echo "No dependency version changes found in Chart.yaml"
            exit 0
          fi
          
          # Extract PR numbers from changelog
          pr_numbers=$(echo "$pr_body_full" | grep -oE '\[#&#8203;[0-9]+\]' | sed -E 's/.*&#8203;([0-9]+).*/\1/' | tr '\n' ' ')
          
          # Get PR info (works for both PR and push events)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            pr_number="${{ github.event.number }}"
          else
            # For push events, find the PR for this branch
            pr_number=$(gh pr list --head "${{ github.ref_name }}" --json number --jq '.[0].number')
          fi
          
          echo "Using PR number: $pr_number"
          
          # Extract PR body and dependency changes
          pr_body_full=$(gh pr view $pr_number --json body --jq '.body')
          dependency_diff=$(git diff HEAD~1 -- Chart.yaml | grep "^[+-].*version:" || true)
          
          # Limit to top 5 PRs if major/minor version changed
          if [ "$current_major" != "$new_major" ] || [ "$current_minor" != "$new_minor" ]; then
            pr_numbers=$(echo $pr_numbers | tr ' ' '\n' | head -5 | tr '\n' ' ')
            echo "Major/minor change detected - analyzing top 5 PRs: $pr_numbers"
          else
            echo "Patch version change - analyzing all PRs: $pr_numbers"
          fi
          
          # Extract changed dependency names from version lines only
          changed_deps=$(echo "$dependency_diff" | grep -B1 "^[+-].*version:" | grep "name:" | sed 's/^[+-]*.*name: *//' | sort -u | tr '\n' ' ')
          echo "Changed dependencies: '$changed_deps'"
          
          # Get current configs only for changed dependencies
          current_config=""
          if [ -f "values.yaml" ]; then
            for dep in $changed_deps; do
              dep_config=$(yq eval ".$dep // empty" "values.yaml" 2>/dev/null)
              if [ -n "$dep_config" ] && [ "$dep_config" != "null" ]; then
                current_config="$current_config\n\n=== $dep config ===\n$dep_config"
              fi
            done
          fi
          
          echo "Analyzing configs for: $changed_deps"
          
          # Analyze PR changes for only the changed dependencies
          combined_analysis=""
          for pr_num in $pr_numbers; do
            if [ -n "$pr_num" ]; then
              for dep in $changed_deps; do
                pr_diff=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                  "https://api.github.com/repos/bitnami/charts/pulls/${pr_num}/files" | \
                  jq -r ".[] | select(.filename | contains(\"${dep}/values.yaml\")) | .patch")
                
                if [ -n "$pr_diff" ] && [ "$pr_diff" != "null" ]; then
                  combined_analysis="$combined_analysis\n\n=== PR #$pr_num ($dep) ===\n$pr_diff"
                fi
              done
            fi
          done
          
          # AI breaking change analysis
          ai_response=$(jq -n \
            --arg deps "$changed_deps" \
            --arg config "$current_config" \
            --arg changes "$combined_analysis" \
            '{
              "messages": [
                {"role": "system", "content": "Analyze Helm chart breaking changes. Output exactly this format:\n* label: breaking | non-breaking\n* confidence: <percentage>\n* rationale: <reasoning>"},
                {"role": "user", "content": ("Dependencies changed: " + $deps + "\nOnly analyze config for: " + $deps + "\nCurrent config:\n" + $config + "\nPR changes:\n" + $changes + "\n\nAnalyze ONLY breaking changes for the specific dependencies that changed.")}
              ],
              "model": "openai/gpt-4o"
            }' | curl -s "https://models.github.ai/inference/chat/completions" \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer $GITHUB_TOKEN" \
             -d @-)
          
          ai_analysis=$(echo "$ai_response" | jq -r '.choices[0].message.content')
          echo "$ai_analysis" > changelog-analysis.md
          
          # Extract label and apply to PR
          label=$(echo "$ai_analysis" | grep "^* label:" | cut -d' ' -f3)
          
          echo "Detected label: $label"
          
          # Create labels if they don't exist
          gh label create "breaking-change" --color "d73a4a" --description "Contains breaking changes" --force || true
          gh label create "non-breaking-change" --color "0e8a16" --description "No breaking changes" --force || true
          
          if [ "$label" = "breaking" ]; then
            gh pr edit $pr_number --add-label "breaking-change"
            echo "breaking_changes=true" >> $GITHUB_OUTPUT
          else
            gh pr edit $pr_number --add-label "non-breaking-change"
            echo "breaking_changes=false" >> $GITHUB_OUTPUT
          fi
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add changelog-analysis.md
          git commit -m "Breaking change analysis" || true
          git push || true
